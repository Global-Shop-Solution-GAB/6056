Program.Sub.Preflight.Start
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Programmer: Bryan Pham
'Date: 8/3/2020
'Description: use Script 1 button to auto assign BOM category based off BOM source
'Hooks:
	'16300:  populate
	'16360: script 1 hook
	
' BOM category:
	'a.	Purchase to Stock = Normal
	'b.	Manufacture to Stock = Normal
	'c.	Manufacture to Job = Phantom
	'd.	Purchase to Job = Normal
	'BOM type is reference checked in Inventory Part options -> reference category

F.Intrinsic.Control.Try
v.Local.sParent.Declare
v.Local.sBOMRef.Declare

V.Local.sSQL.Declare(String)
v.Local.sRet.Declare

F.Intrinsic.Control.Try

f.Intrinsic.Control.If(v.Caller.Hook,=,16300)
	v.Passed.000214.Set("Assign Cat.")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(v.Caller.Hook,=,16360)
	
	f.ODBC.Connection!Con.OpenCompanyConnection
	F.Intrinsic.UI.InvokeWaitDialog("Please wait...","Assigning BOM category")
	v.Local.sParent.Set(v.Passed.000001)
	
	F.Intrinsic.Control.If(V.DataTable.dtBOM.Exists,=,TRUE)
		f.Data.DataTable.Close("dtBOM")
	F.Intrinsic.Control.EndIf
'using recursive method instead of callwrapper for higher performance	
	F.Intrinsic.Control.CallSub(LoadBOMRecursive, "BOM", v.Local.sParent, "LEVEL", 1, "TIER", 0, "count1", 1)
	
	F.Intrinsic.Control.If(V.Args.BOMReturn.Trim, !=, "")
		F.Data.DataTable.CreateFromString("dtBOM", V.Args.BOMReturn, "LEVEL*!*PARENT*!*SEQUENCE_BOM*!*CH_INDEX*!*PART*!*UM*!*Count1*!*NET_QUANTITY*!*SOURCE", "LONG*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*FLOAT*!*FLOAT*!*STRING", "&*&@", "(@)#", True)
	F.Intrinsic.Control.EndIf
	
	'add parent line
	f.Intrinsic.String.Build("Select Parent, Part,quantity,UM_INVENTORY from V_BOM_MSTR where PARENT = '{0}' and SEQUENCE_BOM = '0000'",v.Local.sParent,v.Local.sSQL)
	f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
	
	f.Data.DataTable.AddColumn("dtBOM","Seq",string)
	f.Data.DataTable.AddRow("dtBOM","Parent",v.Local.sRet(0),"PART",v.Local.sRet(1),"Count1",v.Local.sRet(2),"UM",v.Local.sRet(3),"Seq","0000")
	
	v.Local.iCnt.Declare
	'loop thru the BOM datatable and assign category
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.dtBOM.RowCount--,1)
		'09/21/2021 - skip updating parents
		f.Intrinsic.Control.If(V.DataTable.dtBOM(v.Local.iCnt).PART!FieldValTrim,<>,V.DataTable.dtBOM(v.Local.iCnt).PARENT!FieldValTrim)	
		
			f.Intrinsic.String.Build("Select BOM_REF from INVENTORY_MST3 where PART = '{0}';",V.DataTable.dtBOM(v.Local.iCnt).PART!FieldValTrim,v.Local.sSQL)
			f.ODBC.Connection!Con.ExecuteAndReturn(v.Local.sSQL,v.Local.sBOMRef)
			'if BOM ref is checked
			f.Intrinsic.Control.If(v.Local.sBOMRef,=,"Y")
				f.Intrinsic.String.Build("Update BOM_MSTR set CATEGORY = 'R' where PARENT = '{0}' and PART = '{1}';",v.DataTable.dtBOM(v.Local.iCnt).PARENT!FieldValTrim,v.DataTable.dtBOM(v.Local.iCnt).PART!FieldValTrim,v.Local.sSQL)
			'BOM ref not checked
			f.Intrinsic.Control.Else
			
			'Source = MJ then Category = Phantom
				f.Intrinsic.Control.If(v.DataTable.dtBOM(v.Local.iCnt).SOURCE!FieldValTrim,=,"F")
					f.Intrinsic.String.Build("Update BOM_MSTR set CATEGORY = 'P' where PARENT = '{0}' and PART = '{1}';",v.DataTable.dtBOM(v.Local.iCnt).PARENT!FieldValTrim,v.DataTable.dtBOM(v.Local.iCnt).PART!FieldValTrim,v.Local.sSQL)
			'else Category = Normal
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Build("Update BOM_MSTR set CATEGORY = '' where PARENT = '{0}' and PART = '{1}';",v.DataTable.dtBOM(v.Local.iCnt).PARENT!FieldValTrim,v.DataTable.dtBOM(v.Local.iCnt).PART!FieldValTrim,v.Local.sSQL)
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
			f.ODBC.Connection!Con.Execute(v.Local.sSQL)
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCnt)
	
	f.ODBC.Connection!Con.Close
	F.Intrinsic.UI.CloseWaitDialog
	
	F.Intrinsic.UI.Msgbox("Please hit Refresh button to display updated BOM!","Succesfully assigned BOM category!")
	
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End 
	F.Intrinsic.Control.EndTry
	
Program.Sub.Main.End

Program.Sub.loadBOMRecursive.Start
F.Intrinsic.Control.Try
V.Local.sBOM.Declare(String)
V.Local.iLevel.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sTier.Declare(String)
V.Static.iCount.Declare(Long)
V.Local.sDataTable.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.fQuantity.Declare(Float)
V.Local.sReturn.Declare(String)
V.Local.iNextLevel.Declare(Long)
V.Local.iRowCount.Declare(Long)

V.Local.sBOM.Set(V.Args.BOM.Trim)
V.Local.iLevel.Set(V.Args.Level)
V.Local.sTier.Set(V.Args.Tier.Trim)
V.Local.fQuantity.Set(V.Args.Count1)

'get the passed BOM's components
F.Intrinsic.String.Build("select Cast({0} as Integer) as LEVEL, RTRIM(PARENT) as PARENT, RTRIM(SEQUENCE_BOM) as SEQUENCE_BOM, '{1}.' + SEQUENCE_BOM as CH_INDEX, RTRIM(Part) as PART, RTRIM(UM_INVENTORY) as UM, QUANTITY as Count1, QUANTITY * {2} as NET_QUANTITY, SOURCE  from V_BOM_MSTR where PARENT = '{3}' and SEQUENCE_BOM <> '0000' order by SEQUENCE_BOM", V.Local.iLevel, V.Local.sTier, V.Local.fQuantity, V.Local.sBOM, V.Local.sSQL)

F.Intrinsic.Math.Add(V.Static.iCount, 1, V.Static.iCount)
F.Intrinsic.String.Build("dtBOM{0}", V.Static.iCount, V.Local.sDataTable)

F.Data.DataTable.CreateFromSQL(V.Local.sDataTable, "Con", V.Local.sSQL)

'loop through and for each component call this sub
F.Intrinsic.Math.Add(V.Local.iLevel, 1, V.Local.iNextLevel)
V.Local.iRowCount.Set(V.DataTable.[V.Local.sDataTable].RowCount--)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.iRowCount, 1)


	F.Intrinsic.Control.CallSub(LoadBOMRecursive, "BOM", V.DataTable.[V.Local.sDataTable](V.Local.iCounter).PART!FieldValTrim, "LEVEL", V.Local.iNextLevel, "TIER", V.DataTable.[V.Local.sDataTable](V.Local.iCounter).CH_INDEX!FieldValTrim, "Count1", V.DataTable.[V.Local.sDataTable](V.Local.iCounter).NET_QUANTITY!FieldValFloat)
	
	'if there are components to this part (return from this function), merge them in
	F.Intrinsic.Control.If(V.Args.BOMReturn.Trim, !=, "")
		F.Data.DataTable.CreateFromString("dtTemp", V.Args.BOMReturn, "LEVEL*!*PARENT*!*SEQUENCE_BOM*!*CH_INDEX*!*PART*!*UM*!*Count1*!*NET_QUANTITY*!*SOURCE", "LONG*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*FLOAT*!*FLOAT*!*STRING", "&*&@", "(@)#")
		F.Data.DataTable.Merge("dtTemp", V.Local.sDataTable, False, 2)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Data.DataView.Create(V.Local.sDataTable, "dvTemp", 22)
F.Data.DataView.ToString(V.Local.sDataTable, "dvTemp", "LEVEL*!*PARENT*!*SEQUENCE_BOM*!*CH_INDEX*!*PART*!*UM*!*Count1*!*NET_QUANTITY*!*SOURCE", "&*&@", "(@)#", V.Local.sReturn)
F.Data.DataView.Close(V.Local.sDataTable, "dvTemp")
F.Data.DataTable.Close(V.Local.sDataTable)

'return the finished DT of this BOM
F.Intrinsic.Variable.AddRV("BOMReturn", V.Local.sReturn)

F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.End 
	F.Intrinsic.Control.EndTry
Program.Sub.loadBOMRecursive.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$bpham$}$20211004110003620$}$Di0riF4Q5RIv6jxva5zSWDOOsXP37NsozYhSPHFSNRjtqu8li+WlUfMlEj+Mus1v7W0+njszFk0=
Program.Sub.Comments.End